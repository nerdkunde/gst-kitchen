#!/usr/bin/env ruby

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require "trollop"
require "gst-kitchen"
require "gst-kitchen/version"

require "fileutils"

SUB_COMMANDS = %w(feed process list version)
global_opts = Trollop::options do
  banner "Geekstammtischs Kitchen to publish podcats..."
  opt :podcast, "path of podcast YAML specification", :default => "podcast.yml"
  stop_on SUB_COMMANDS
end

case ARGV.shift
when "version"
  puts GstKitchen::VERSION

when "feed"
  subcmd_opts = Trollop::options do
  end
  Podcast.from_yaml(global_opts[:podcast]).render_all_feeds

when "list"
  productions = Auphonic::Account.init_from_system.productions
  productions.each do |production|
    puts "#{production.meta["uuid"]} => #{production.meta["metadata"]["title"]}"
  end

when "process"
  subcmd_opts = Trollop::options do
    opt :uuid, "Auphonic's production UUID", :type => :string
  end
  production = Auphonic::Account.init_from_system.production(subcmd_opts[:uuid])

  podcast = Podcast.from_yaml(global_opts[:podcast])
  FileUtils.mkdir_p podcast.episodes_path
  episode = podcast.create_episode_from_auphonic production

  puts "Episode: #{episode}"
  puts "Writing episode YAML to #{File.join(podcast.episodes_path, episode.handle.downcase)}.yml"
  podcast.export_episode(episode)

when "stats"
  podcast = Podcast.from_yaml(global_opts[:podcast])
  if STDIN.tty?
    STDERR.puts "You need to pipe logs to gst-kitchen stats, e.g. cat logs/* | gst-kitchen stats"
    exit
  end
  downloads = {}
  while (logline = STDIN.gets)
    # 93.194.154.91 - - [13/Dec/2012:16:22:38 +0100] "GET /episodes/gst000.m4a HTTP/1.1" 200 18676513 "-" "iTunes/11.0 (Macintosh; OS X 10.8.2) AppleWebKit/536.26.14"

    next unless log_line_match = / - - \[(.*?)\].*?(#{podcast.handle.downcase}\d{3}\..*?) .*?2\d\d (\d+) /.match(logline)

    _date = log_line_match[1]
    filename = log_line_match[2]
    size = log_line_match[3]

    handle, format = filename.split(".")

    next unless episode = podcast.episode_by_handle(handle)
    next unless ["mp3", "m4a", "opus"].include? format

    downloads[handle] ||= {}
    downloads[handle][format] ||= {}

    media_format = ["mp3", "opus"].include?(format) ? format : "aac"

    downloads[handle][format][:size] ||= episode.media[media_format]["size"]
    downloads[handle][format][:downloaded] ||= 0
    downloads[handle][format][:downloaded] += size.to_i
  end

  total_downloads = {}
  downloads.each do |handle, episode|
    episode.each do |format, stats|
      downloads[handle][format][:count] = stats[:downloaded].to_f / stats[:size]
      total_downloads[handle] ||= {}
      total_downloads[handle]["total_downloads"] ||= 0
      total_downloads[handle]["total_downloads"] += downloads[handle][format][:count]
    end
  end

  downloads.keys.each do |handle|
    downloads[handle].merge!(total_downloads[handle])
  end

  puts downloads.to_yaml
else
  Trollop::die "unknown subcommand #{subcmd.inspect}"
end
